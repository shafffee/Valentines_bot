import telebot
from telebot import types
import pickle
from pathlib import Path
import logging
import time

token = '7440210952:AAFwA4ZDp1RWTynFF1aXQHBHZOZxKr2cEmQ'
first_options = ['üé© –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π', 'üòä –î—Ä—É–∂–µ—Å–∫–∏–π','üòÇ –ó–∞–±–∞–≤–Ω—ã–π']
second_options = ['üè¢ –û —Ä–∞–±–æ—Ç–µ', 'üíä –§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞', 'üí° –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']

first_question = "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–º –ø–æ –¥—É—à–µ? üòä –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ–ø–ª—É—é –∏ –¥—É—à–µ–≤–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É –¥–ª—è –≤–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥."
second_question = "–ö–∞–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ –≤–∞–º –∫–∞–∂–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π? ü§î –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–¥–µ–∞–ª—å–Ω—ã–º!"
finish_message = "–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é! üíï –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —ç—Ç—É –æ—Å–æ–±–µ–Ω–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–æ—á–∫—É –≤–∞—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å –∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"
again_button = '–ï—â–µ –æ–¥–Ω–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç! üòâ'

savefile = Path(".\\data\\choises.dat")

for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)
logging.basicConfig(
    level=logging.INFO,
    filename=".\\data\\log.log",
    encoding="utf-8",
    filemode="a",
    format='{asctime}|\t{message}',
    style="{",
    datefmt="%Y-%m-%d %H:%M",
)


loaded_images = {}

choises = {}
def save(choises):
    with open(savefile, 'wb+') as f:
        pickle.dump(choises, f)

if(savefile.exists()):
    with open(savefile, 'rb') as f:
        choises = pickle.load(f)

bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
    for option in first_options:
        markup.add(types.KeyboardButton(option))
    bot.send_message(message.from_user.id, first_question, reply_markup=markup)
    choises[message.from_user.id]=""
    save(choises)
    logging.info("user "+str(message.from_user.id)+"\t added")

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if not(message.from_user.id in choises):
        choises[message.from_user.id]=""
    if len(choises[message.from_user.id])==0:
        for o1 in range(len(first_options)):
            if message.text==first_options[o1]:
                choises[message.from_user.id]=str(o1)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                for option in second_options:
                    markup.add(types.KeyboardButton(option))
                bot.send_message(message.from_user.id, second_question, reply_markup=markup)

                logging.info("user "+str(message.from_user.id)+"\t chose "+str(o1)+" on the first question")
                break;

    if len(choises[message.from_user.id])==1:
        for o2 in range(len(second_options)):
            if message.text==second_options[o2]:
                choises[message.from_user.id]+=str(o2)
                logging.info("user "+str(message.from_user.id)+"\t chose "+str(o2)+" on the second question")
                
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                markup.add(types.KeyboardButton(again_button))
                
                bot.send_message(message.from_user.id, finish_message, reply_markup=markup)
                if not(choises[message.from_user.id] in loaded_images):
                    photo = open(".\\images\\"+choises[message.from_user.id]+".jpg",'rb')
                    loaded_images[choises[message.from_user.id]] = bot.send_photo(message.from_user.id,photo).photo[0].file_id
                else:
                    bot.send_photo(message.from_user.id,loaded_images[choises[message.from_user.id]])
                logging.info("user "+str(message.from_user.id)+"\t got image "+str(choises[message.from_user.id]))
                break;
    if len(choises[message.from_user.id])==2:
        if message.text==again_button:
            choises[message.from_user.id]=""
            logging.info("user "+str(message.from_user.id)+"\t restarted")
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
            for option in first_options:
                markup.add(types.KeyboardButton(option))
            bot.send_message(message.from_user.id, first_question, reply_markup=markup)

    save(choises)

if __name__ == '__main__':
  while True:
    try:
      bot.polling(none_stop=True, interval = 0)
    except:
      time.sleep(0.1)
